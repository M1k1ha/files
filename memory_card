#создай приложение для запоминания информации
#подключаем эти модули
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import*
from random import*
#класс
class Question():
    def __init__(self, question, right_answer, wrong1, wrong2, wrong3):
        self.question = question
        self.right_answer = right_answer
        self.wrong1 = wrong1
        self.wrong2 = wrong2
        self.wrong3 = wrong3

#список
question_list = []
question_list.append(Question('Сколько щупалец у гаста?',
     "9","12","23","6"))
question_list.append(Question('Что происходит с пиглином в краю и обычном мире?',
     "зомби-пиглином","так и останется им","хоглином","свиньёй"))
question_list.append(Question('Сколько приблизительно блоков в майнкрафте(считая цветные)?', 
'~600','~500','~1000','~700'))
#оконное приложение
app = QApplication([])
otvetit = QPushButton('Ответить')
main_win = QWidget()
main_win.show()
main_win.setWindowTitle('Memory Card')
question = QLabel('Что происходит с пиглином в краю и обычном мире?')
#варианты ответов(QRadioBox)
rgb = QGroupBox("Варианты ответа")

otvet = QPushButton("Ответить")
rbtn_1 = QRadioButton("станет хоглином")
rbtn_2 = QRadioButton("станет свино-зомби")
rbtn_3 = QRadioButton("станет зомби")
rbtn_4 = QRadioButton("станет свиньёй")

rgb_button = QButtonGroup()
rgb_button.addButton(rbtn_1)
rgb_button.addButton(rbtn_2)
rgb_button.addButton(rbtn_3)
rgb_button.addButton(rbtn_4)



#обычные линии
l_ans1 = QHBoxLayout()
l_ans2 = QVBoxLayout()
l_ans3 = QVBoxLayout()

#главные линии
g_layout1 = QVBoxLayout()

#добавление виджетов на линии
l_ans2.addWidget(rbtn_1)
l_ans2.addWidget(rbtn_2)
l_ans3.addWidget(rbtn_3)
l_ans3.addWidget(rbtn_4)
l_ans1.addLayout(l_ans2)
l_ans1.addLayout(l_ans3)
rgb.setLayout(l_ans1)


ans_rgb = QGroupBox()
result = QLabel("Прав ты или нет")
otvet = QLabel("Правильный ответ")
l_ans4 = QVBoxLayout()
l_ans4.addWidget(result)
l_ans4.addWidget(otvet)
ans_rgb.setLayout(l_ans4)
ans_rgb.hide()



g_layout1.addWidget(question)
g_layout1.addWidget(rgb)
g_layout1.addWidget(ans_rgb)
g_layout1.addWidget(otvetit)

main_win.setLayout(g_layout1)

def show_result():
     rgb.hide()
     ans_rgb.show()
     otvetit.setText("Следующий вопрос")


def show_question():
     rgb.show()
     ans_rgb.hide()
     otvetit.setText("Ответить")
     rgb_button.setExclusive(False)
     rbtn_1.setChecked(False)
     rbtn_2.setChecked(False)
     rbtn_3.setChecked(False)
     rbtn_4.setChecked(False)
     rgb_button.setExclusive(True)


answers = [rbtn_1, rbtn_2, rbtn_3, rbtn_4]

def ask(q: Question):
     shuffle(answers)
     answers[0].setText(q.right_answer)
     answers[1].setText(q.wrong1)
     answers[2].setText(q.wrong2) 
     answers[0].setText(q.wrong3)
     question.setText(q.question)
     result.setText(q.right_answer)

def swow_correct(res):
     result.setText(res)
     show_question()

def check_answer():
     if answer[0].isChecked():
          show_correct()
     else:
          if answer[1].isChecked() or answer[2].isChecked() or answer[0].isChecked():
               show_correct()



def next_question():
     #window.total += 1
     #print('Статистика \n-Всего вопросов: ', window.total, '\n-Правильных ответов: ', window.score)
     cur_question = randint(0, len(question_list) - 1)
     q = question_list[cur_question]
     ask(q)

def click_OK():
     if otvetit.text() == 'Ответить':
          check_answer()
     else:
          next_question()

otvetit.clicked.connect(show_result)
#window.score = 0
#window.total = 0
next_question()
main_win.resize(400, 300)
main_win.show()
#важная програмка
app.exec_()
